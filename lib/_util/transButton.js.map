{"version":3,"sources":["_util/transButton.jsx"],"names":["inlineStyle","border","background","padding","lineHeight","TransButton","arguments","onKeyDown","event","keyCode","KeyCode","ENTER","preventDefault","onKeyUp","onClick","props","setRef","btn","button","focus","blur","style","React","Component"],"mappings":";;;;;;;AAIA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,IAAMA,WAAW,GAAG;AAChBC,EAAAA,MAAM,EAAE,CADQ;AAEhBC,EAAAA,UAAU,EAAE,aAFI;AAGhBC,EAAAA,OAAO,EAAE,CAHO;AAIhBC,EAAAA,UAAU,EAAE;AAJI,CAApB;;IAMMC,W;;;;;AACF,yBAAc;AAAA;;AAAA;;AACV,sFAASC,SAAT;;AACA,UAAKC,SAAL,GAAiB,UAAAC,KAAK,EAAI;AAAA,UACdC,OADc,GACFD,KADE,CACdC,OADc;;AAEtB,UAAIA,OAAO,KAAKC,oBAAQC,KAAxB,EAA+B;AAC3BH,QAAAA,KAAK,CAACI,cAAN;AACH;AACJ,KALD;;AAMA,UAAKC,OAAL,GAAe,UAAAL,KAAK,EAAI;AAAA,UACZC,OADY,GACAD,KADA,CACZC,OADY;AAAA,UAEZK,OAFY,GAEA,MAAKC,KAFL,CAEZD,OAFY;;AAGpB,UAAIL,OAAO,KAAKC,oBAAQC,KAApB,IAA6BG,OAAjC,EAA0C;AACtCA,QAAAA,OAAO;AACV;AACJ,KAND;;AAOA,UAAKE,MAAL,GAAc,UAACC,GAAD,EAAS;AACnB,YAAKC,MAAL,GAAcD,GAAd;AACH,KAFD;;AAfU;AAkBb;;;;4BACO;AACJ,UAAI,KAAKC,MAAT,EAAiB;AACb,aAAKA,MAAL,CAAYC,KAAZ;AACH;AACJ;;;2BACM;AACH,UAAI,KAAKD,MAAT,EAAiB;AACb,aAAKA,MAAL,CAAYE,IAAZ;AACH;AACJ;;;6BACQ;AAAA,UACGC,KADH,GACa,KAAKN,KADlB,CACGM,KADH;AAEL,aAAQ;AAAQ,QAAA,GAAG,EAAE,KAAKL;AAAlB,SAA8B,KAAKD,KAAnC;AAA0C,QAAA,SAAS,EAAE,KAAKR,SAA1D;AAAqE,QAAA,OAAO,EAAE,KAAKM,OAAnF;AAA4F,QAAA,KAAK,EAAE,SAAc,EAAd,EAAkBb,WAAlB,EAA+BqB,KAA/B;AAAnG,SAAR;AACH;;;;EAjCqBC,KAAK,CAACC,S;;eAmCjBlB,W","sourcesContent":["/**\n * Wrap of sub component which need use as Button capacity (like Icon component).\n * This helps accessibility reader to tread as a interactive button to operation.\n */\nimport * as React from 'react';\nimport KeyCode from 'rc-util/lib/KeyCode';\nconst inlineStyle = {\n    border: 0,\n    background: 'transparent',\n    padding: 0,\n    lineHeight: 'inherit',\n};\nclass TransButton extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.onKeyDown = event => {\n            const { keyCode } = event;\n            if (keyCode === KeyCode.ENTER) {\n                event.preventDefault();\n            }\n        };\n        this.onKeyUp = event => {\n            const { keyCode } = event;\n            const { onClick } = this.props;\n            if (keyCode === KeyCode.ENTER && onClick) {\n                onClick();\n            }\n        };\n        this.setRef = (btn) => {\n            this.button = btn;\n        };\n    }\n    focus() {\n        if (this.button) {\n            this.button.focus();\n        }\n    }\n    blur() {\n        if (this.button) {\n            this.button.blur();\n        }\n    }\n    render() {\n        const { style } = this.props;\n        return (<button ref={this.setRef} {...this.props} onKeyDown={this.onKeyDown} onKeyUp={this.onKeyUp} style={Object.assign({}, inlineStyle, style)}/>);\n    }\n}\nexport default TransButton;\n"],"file":"transButton.js"}