{"version":3,"sources":["modal/ActionButton.jsx"],"names":["React","ReactDOM","Button","ActionButton","props","onClick","actionFn","closeModal","ret","length","then","setState","loading","state","autoFocus","$this","findDOMNode","timeoutId","setTimeout","focus","clearTimeout","type","children","buttonProps","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,QAAZ,MAA0B,WAA1B;AACA,OAAOC,MAAP,MAAmB,WAAnB;;IACqBC,Y;;;;;AACjB,wBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,sFAAMA,KAAN;;AACA,UAAKC,OAAL,GAAe,YAAM;AAAA,wBACgB,MAAKD,KADrB;AAAA,UACTE,QADS,eACTA,QADS;AAAA,UACCC,UADD,eACCA,UADD;;AAEjB,UAAID,QAAJ,EAAc;AACV,YAAIE,GAAJ;;AACA,YAAIF,QAAQ,CAACG,MAAb,EAAqB;AACjBD,UAAAA,GAAG,GAAGF,QAAQ,CAACC,UAAD,CAAd;AACH,SAFD,MAGK;AACDC,UAAAA,GAAG,GAAGF,QAAQ,EAAd;;AACA,cAAI,CAACE,GAAL,EAAU;AACND,YAAAA,UAAU;AACb;AACJ;;AACD,YAAIC,GAAG,IAAIA,GAAG,CAACE,IAAf,EAAqB;AACjB,gBAAKC,QAAL,CAAc;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAAd;;AACAJ,UAAAA,GAAG,CAACE,IAAJ,CAAS,YAAa;AAClB;AACA;AACAH,YAAAA,UAAU,MAAV;AACH,WAJD,EAIG,YAAM;AACL;AACA,kBAAKI,QAAL,CAAc;AAAEC,cAAAA,OAAO,EAAE;AAAX,aAAd;AACH,WAPD;AAQH;AACJ,OAtBD,MAuBK;AACDL,QAAAA,UAAU;AACb;AACJ,KA5BD;;AA6BA,UAAKM,KAAL,GAAa;AACTD,MAAAA,OAAO,EAAE;AADA,KAAb;AA/Be;AAkClB;;;;wCACmB;AAChB,UAAI,KAAKR,KAAL,CAAWU,SAAf,EAA0B;AACtB,YAAMC,KAAK,GAAGd,QAAQ,CAACe,WAAT,CAAqB,IAArB,CAAd;AACA,aAAKC,SAAL,GAAiBC,UAAU,CAAC;AAAA,iBAAMH,KAAK,CAACI,KAAN,EAAN;AAAA,SAAD,CAA3B;AACH;AACJ;;;2CACsB;AACnBC,MAAAA,YAAY,CAAC,KAAKH,SAAN,CAAZ;AACH;;;6BACQ;AAAA,yBACmC,KAAKb,KADxC;AAAA,UACGiB,IADH,gBACGA,IADH;AAAA,UACSC,QADT,gBACSA,QADT;AAAA,UACmBC,WADnB,gBACmBA,WADnB;AAEL,UAAMX,OAAO,GAAG,KAAKC,KAAL,CAAWD,OAA3B;AACA,aAAQ,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAES,IAAd;AAAoB,QAAA,OAAO,EAAE,KAAKhB,OAAlC;AAA2C,QAAA,OAAO,EAAEO;AAApD,SAAiEW,WAAjE,GACPD,QADO,CAAR;AAGH;;;;EAnDqCtB,KAAK,CAACwB,S;;SAA3BrB,Y","sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport Button from '../button';\nexport default class ActionButton extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onClick = () => {\n            const { actionFn, closeModal } = this.props;\n            if (actionFn) {\n                let ret;\n                if (actionFn.length) {\n                    ret = actionFn(closeModal);\n                }\n                else {\n                    ret = actionFn();\n                    if (!ret) {\n                        closeModal();\n                    }\n                }\n                if (ret && ret.then) {\n                    this.setState({ loading: true });\n                    ret.then((...args) => {\n                        // It's unnecessary to set loading=false, for the Modal will be unmounted after close.\n                        // this.setState({ loading: false });\n                        closeModal(...args);\n                    }, () => {\n                        // See: https://github.com/ant-design/ant-design/issues/6183\n                        this.setState({ loading: false });\n                    });\n                }\n            }\n            else {\n                closeModal();\n            }\n        };\n        this.state = {\n            loading: false,\n        };\n    }\n    componentDidMount() {\n        if (this.props.autoFocus) {\n            const $this = ReactDOM.findDOMNode(this);\n            this.timeoutId = setTimeout(() => $this.focus());\n        }\n    }\n    componentWillUnmount() {\n        clearTimeout(this.timeoutId);\n    }\n    render() {\n        const { type, children, buttonProps } = this.props;\n        const loading = this.state.loading;\n        return (<Button type={type} onClick={this.onClick} loading={loading} {...buttonProps}>\n        {children}\n      </Button>);\n    }\n}\n"],"file":"ActionButton.js"}